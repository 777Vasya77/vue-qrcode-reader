import{_ as o,a as l,b as t,c as p,d as r}from"./chunks/safari_32x32.e02d9c5e.js";import{_ as c,H as i,c as y,C as s,a,J as F,V as e,o as d}from"./chunks/framework.336b8923.js";const S=JSON.parse('{"title":"QrcodeStream","description":"","frontmatter":{},"headers":[],"relativePath":"api/QrcodeStream.md","filePath":"api/QrcodeStream.md","lastUpdated":1617811035000}'),D={name:"api/QrcodeStream.md"},h=e('<h1 id="qrcodestream" tabindex="-1">QrcodeStream <a class="header-anchor" href="#qrcodestream" aria-label="Permalink to &quot;QrcodeStream&quot;">​</a></h1><h2 id="browser-support" tabindex="-1">Browser Support <a class="header-anchor" href="#browser-support" aria-label="Permalink to &quot;Browser Support&quot;">​</a></h2><p>This component fundamentally depends on the <a href="https://caniuse.com/#feat=stream" target="_blank" rel="noreferrer">Stream API</a>. Vue Native is not supported (see <a href="https://github.com/gruhn/vue-qrcode-reader/issues/206" target="_blank" rel="noreferrer">#206</a>).</p><table><thead><tr><th style="text-align:center;"><img src="'+o+'" alt="Internet Explorer"></th><th style="text-align:center;"><img src="'+l+'" alt="Edge"></th><th style="text-align:center;"><img src="'+t+'" alt="Firefox"></th><th style="text-align:center;"><img src="'+p+'" alt="Chrome"></th><th style="text-align:center;"><img src="'+r+`" alt="Safari"></th></tr></thead><tbody><tr><td style="text-align:center;">No</td><td style="text-align:center;">Yes</td><td style="text-align:center;">Yes</td><td style="text-align:center;">Yes¹</td><td style="text-align:center;">Yes²</td></tr></tbody></table><ol><li>Chrome requires <a href="https://sites.google.com/a/chromium.org/dev/Home/chromium-security/deprecating-powerful-features-on-insecure-origins" target="_blank" rel="noreferrer">HTTPS or localhost</a> (see <em>Troubleshooting</em> for help)</li><li>Safari also requires HTTPS <strong>even</strong> on localhost (see <a href="https://github.com/gruhn/vue-qrcode-reader/issues/48" target="_blank" rel="noreferrer">#48</a>). Support is limited for: <ul><li>web apps added to home screen (PWA mode): at least <strong>iOS 13.4</strong> (see <a href="https://github.com/gruhn/vue-qrcode-reader/issues/76" target="_blank" rel="noreferrer">#76</a>)</li><li>iOS browsers other than Safari (<em>Chrome for iOS</em>, <em>Firefox for iOS</em>, ...): at least <strong>iOS 14.3</strong> (see <a href="https://github.com/gruhn/vue-qrcode-reader/issues/29" target="_blank" rel="noreferrer">#29</a>)</li><li>WkWebView component in native iOS apps: at least <strong>iOS 14.3</strong> (see <a href="https://github.com/gruhn/vue-qrcode-reader/issues/29" target="_blank" rel="noreferrer">#29</a>)</li></ul></li></ol><h2 id="events" tabindex="-1">Events <a class="header-anchor" href="#events" aria-label="Permalink to &quot;Events&quot;">​</a></h2><h3 id="decode" tabindex="-1"><code>decode</code> <a class="header-anchor" href="#decode" aria-label="Permalink to &quot;\`decode\`&quot;">​</a></h3><ul><li><strong>Payload Type:</strong> <code>String</code></li></ul><p>Once a stream from the users camera is loaded, it&#39;s displayed and continuously scanned for QR codes. Results are indicated by the <code>decode</code> event.</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">qrcode-stream</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@decode</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">onDecode</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">qrcode-stream</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">methods</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">onDecode</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">decodedString</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If you scan the same QR code multiple times in a row, <code>decode</code> is still only emitted once. When you hold a QR code in the camera, frames are actually decoded multiple times a second but you don&#39;t want to be flooded with <code>decode</code> events that often. That&#39;s why the last decoded QR code is always cached and only new results are propagated. However changing the value of <code>camera</code> resets this internal cache.</p></div><h3 id="detect" tabindex="-1"><code>detect</code> <a class="header-anchor" href="#detect" aria-label="Permalink to &quot;\`detect\`&quot;">​</a></h3><ul><li><strong>Payload Type:</strong> <code>Promise&lt;Object&gt;</code></li></ul><p>The <code>detect</code> event is basically a verbose version of <code>decode</code>. <code>decode</code> only gives you the string encoded by QR codes. <code>detect</code> on the other hand ...</p><ul><li>is always emitted before <code>decode</code></li><li>gives you the coordinates of the QR code in the camera frame</li><li>does NOT silently fail in case of errors</li></ul><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">qrcode-stream</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@detect</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">onDetect</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">qrcode-stream</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">methods</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">async</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">onDetect</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">promise</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">content</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">      </span><span style="color:#676E95;font-style:italic;">// decoded String</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">location</span><span style="color:#F07178;">      </span><span style="color:#676E95;font-style:italic;">// QR code coordinates</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">promise</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">error</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="init" tabindex="-1"><code>init</code> <a class="header-anchor" href="#init" aria-label="Permalink to &quot;\`init\`&quot;">​</a></h3><ul><li><strong>Payload Type:</strong> <code>Promise&lt;MediaTrackCapabilities&gt;</code></li></ul><p>It might take a while before the component is ready and the scanning process starts. The user has to be asked for camera access permission first and the camera stream has to be loaded.</p><p>If you want to show a loading indicator, you can listen for the <code>init</code> event. It&#39;s emitted as soon as the component is mounted. It carries a promise which resolves with the cameras <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/getCapabilities" target="_blank" rel="noreferrer">MediaTrackCapabilities</a> when everything is ready. The promise is rejected if initialization fails. This can have <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia#Exceptions" target="_blank" rel="noreferrer">a couple of reasons</a>.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>In Chrome you can&#39;t prompt users for permissions a second time. Once denied, users can only manually grant them. Make sure your users understand why you need access to their camera <strong>before</strong> you mount this component. Otherwise they might panic and deny and then get frustrated because they don&#39;t know how to change their decision.</p></div><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">qrcode-stream</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@init</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">onInit</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">qrcode-stream</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">methods</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">async</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">onInit</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">promise</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// show loading indicator</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">capabilities</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">promise</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// successfully initialized</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">error</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">error</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">NotAllowedError</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// user denied camera access permisson</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">error</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">NotFoundError</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// no suitable camera device installed</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">error</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">NotSupportedError</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// page is not served over HTTPS (or localhost)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">error</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">NotReadableError</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// maybe camera is already in use</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">error</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">OverconstrainedError</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// did you requested the front camera although there is none?</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">error</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">StreamApiNotSupportedError</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// browser seems to be lacking features</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">finally</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// hide loading indicator</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="props" tabindex="-1">Props <a class="header-anchor" href="#props" aria-label="Permalink to &quot;Props&quot;">​</a></h2><h3 id="track" tabindex="-1"><code>track</code> <a class="header-anchor" href="#track" aria-label="Permalink to &quot;\`track\`&quot;">​</a></h3><ul><li><strong>Input Type:</strong> <code>Function</code></li><li><strong>Default:</strong> <code>undefined</code></li></ul><p>You can visually highlight detected QR codes in real-time. A transparent canvas overlays the camera stream. When a QR code is detected, its location is painted to the canvas.</p><p>To enable this feature, pass a function to <code>track</code> that defines how this should look like. This function is called to produce each frame. It receives the location object as the first argument and a <code>CanvasRenderingContext2D</code> instance as the second argument.</p><p>For example check out the <a href="./../demos/CustomTracking.html">Custom Tracking Demo</a></p><p>Note that this scanning frequency has to be increased. So if you want to go easy on your target device you might not want to enable tracking.</p><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>Avoid access to reactive properties in this function (like stuff in <code>data</code>, <code>computed</code> or your Vuex store). The function is called several times a second and might cause memory leaks. To be safe don&#39;t access <code>this</code> at all.</p></div><h3 id="camera" tabindex="-1"><code>camera</code> <a class="header-anchor" href="#camera" aria-label="Permalink to &quot;\`camera\`&quot;">​</a></h3><ul><li><strong>Input Type:</strong> <code>String</code></li><li><strong>Default:</strong> <code>auto</code></li><li><strong>Valid Inputs:</strong> <code>auto</code>, <code>rear</code>, <code>front</code>, <code>off</code></li></ul><p>With the <code>camera</code> prop you can control which camera to access on the users device.</p><ul><li>Use <code>front</code> or <code>rear</code> to force request the front or rear camera respectively.</li><li>If you choose <code>auto</code> the rear camera is requested by default. But if a device like a laptop has only a front camera installed, <code>auto</code> will fallback to that.</li><li>Use <code>off</code> to not request a camera at all or in other words: turn the camera off.</li></ul><p>Every time the camera prop is modified, a new camera stream is requested so the <code>init</code> event is emitted again. That way you can catch errors. For example when the front camera is requested on a device that doesn&#39;t have one.</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">qrcode-stream</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">:camera</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">camera</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@init</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">onCameraChange</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">qrcode-stream</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">data</span><span style="color:#A6ACCD;"> () </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    camera</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">auto</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">},</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">methods</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">startFrontCamera</span><span style="color:#F07178;"> () </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">camera</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">front</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">onCameraChange</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">promise</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">catch</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;font-style:italic;">error</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">cameraMissingError</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">error</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">OverconstrainedError</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">triedFrontCamera</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">camera</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">front</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">triedFrontCamera</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">cameraMissingError</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// no front camera on this device</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="torch" tabindex="-1"><code>torch</code> <a class="header-anchor" href="#torch" aria-label="Permalink to &quot;\`torch\`&quot;">​</a></h3><ul><li><strong>Input Type:</strong> <code>Boolean</code></li><li><strong>Default:</strong> <code>false</code></li></ul><p>With the <code>torch</code> prop you can turn a devices flashlight on/off. This is not consistently supported by all devices and browsers. Support can even vary on the same device with the same browser. For example the rear camera often has a flashlight but the front camera doesn&#39;t. We can only tell if flashlight control is supported once the camera is loaded and the <code>init</code> event has been emitted. At the moment, <code>torch</code> silently fails on unsupported devices. But from the <code>init</code> events payload you can access the <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/getCapabilities" target="_blank" rel="noreferrer">MediaTrackCapabilities</a> object. This will tell you whether or not <code>torch</code> is supported.</p><p>Due to API limitations the camera stream must be reloaded when turning the torch on/off. That means the <code>init</code> event will be emitted again.</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">qrcode-stream</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">:torch</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">true</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@init</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">onInit</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">qrcode-stream</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">methods</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">async</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">onInit</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">promise</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">capabilities</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">promise</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">TORCH_IS_SUPPORTED</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!!</span><span style="color:#A6ACCD;">capabilities</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">torch</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div>`,46),m={id:"worker",tabindex:"-1"},u=s("code",null,"worker",-1),g=s("a",{class:"header-anchor",href:"#worker","aria-label":'Permalink to "`worker` <Badge text="removed in v3.0.0" type="error" />"'},"​",-1),f=e(`<p><a href="https://github.com/gruhn/vue-qrcode-reader/blob/3608e0e04b0fbc8d2b57a5713fef92eef1e84c41/docs/api/QrcodeStream.md#worker-" target="_blank" rel="noreferrer">old documentation</a></p><h2 id="slots" tabindex="-1">Slots <a class="header-anchor" href="#slots" aria-label="Permalink to &quot;Slots&quot;">​</a></h2><h3 id="default" tabindex="-1">default <a class="header-anchor" href="#default" aria-label="Permalink to &quot;default&quot;">​</a></h3><p>Any distributed content overlays the camera stream, wrapped in a <code>position: absolute</code> container.</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">qrcode-stream</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">b</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">stuff here overlays the camera stream</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">b</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">qrcode-stream</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div>`,5);function C(A,b,v,k,_,q){const n=i("Badge");return d(),y("div",null,[h,s("h3",m,[u,a(),F(n,{text:"removed in v3.0.0",type:"error"}),a(),g]),f])}const T=c(D,[["render",C]]);export{S as __pageData,T as default};
